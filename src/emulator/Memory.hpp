//
//  Memory.hpp
//  Chip8Emulator
//

#ifndef Memory_hpp
#define Memory_hpp

#include "CHIP.h"

#define MEM_SIZE 0xFFF
#define MEM_START 0x200

const static byte font[16 * 5] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0,	// 0
    0x20, 0x60, 0x20, 0x20, 0x70,	// 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0,	// 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,	// 3
    0x90, 0x90, 0xF0, 0x10, 0x10,	// 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0,	// 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,	// 6
    0xF0, 0x10, 0x20, 0x40, 0x40,	// 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,	// 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0,	// 9
    0xF0, 0x90, 0xF0, 0x90, 0x90,	// A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,	// B
    0xF0, 0x80, 0x80, 0x80, 0xF0,	// C
    0xE0, 0x90, 0x90, 0x90, 0xE0,	// D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,	// E
    0xF0, 0x80, 0xF0, 0x80, 0x80	// F
};

class Memory {
private:
	byte data[MEM_SIZE];

public:
    void reset();
	byte& operator[](ushort i);
	void clear();
    void fillMemory(byte* mem);
};

#endif /* Memory_hpp */
